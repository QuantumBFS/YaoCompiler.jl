using YaoLang
using YaoLang.Compiler: optimize
using ZXCalculus
using YaoArrayRegister
using Test

@device function test_cir()
    5 => H
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    5 => T
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    4 => T
    5 => T
    @ctrl 1 4 => X
    4 => shift($(7 / 4 * π))
    1 => T
    @ctrl 1 4 => X
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 3 5 => X
    5 => T
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 3 5 => X
    4 => T
    5 => T
    @ctrl 3 4 => X
    4 => shift($(7 / 4 * π))
    5 => H
    3 => T
    @ctrl 3 4 => X
    @ctrl 4 5 => X
    5 => H
    @ctrl 3 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 2 5 => X
    5 => T
    @ctrl 3 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 2 5 => X
    3 => T
    5 => T
    @ctrl 2 3 => X
    3 => shift($(7 / 4 * π))
    5 => H
    2 => T
    @ctrl 2 3 => X
    @ctrl 3 5 => X
    5 => H
    @ctrl 2 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    5 => T
    @ctrl 2 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    2 => T
    5 => T
    @ctrl 1 2 => X
    2 => shift($(7 / 4 * π))
    5 => H
    1 => T
    @ctrl 1 2 => X
    @ctrl 2 5 => X
    @ctrl 1 5 => X
end
cir = test_cir()
r = rand_state(5)
r_pt = copy(r)
r_pt_cl = copy(r)
r |> cir

@device optimizer = [:zx_teleport] function teleport_cir()
    5 => H
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    5 => T
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    4 => T
    5 => T
    @ctrl 1 4 => X
    4 => shift($(7 / 4 * π))
    1 => T
    @ctrl 1 4 => X
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 3 5 => X
    5 => T
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 3 5 => X
    4 => T
    5 => T
    @ctrl 3 4 => X
    4 => shift($(7 / 4 * π))
    5 => H
    3 => T
    @ctrl 3 4 => X
    @ctrl 4 5 => X
    5 => H
    @ctrl 3 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 2 5 => X
    5 => T
    @ctrl 3 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 2 5 => X
    3 => T
    5 => T
    @ctrl 2 3 => X
    3 => shift($(7 / 4 * π))
    5 => H
    2 => T
    @ctrl 2 3 => X
    @ctrl 3 5 => X
    5 => H
    @ctrl 2 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    5 => T
    @ctrl 2 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    2 => T
    5 => T
    @ctrl 1 2 => X
    2 => shift($(7 / 4 * π))
    5 => H
    1 => T
    @ctrl 1 2 => X
    @ctrl 2 5 => X
    @ctrl 1 5 => X
end
tp_cir = teleport_cir()
r_pt |> tp_cir
@test fidelity(r, r_pt) ≈ 1

@device optimizer = [:zx_clifford, :zx_teleport] function clifford_teleport_cir()
    5 => H
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    5 => T
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    4 => T
    5 => T
    @ctrl 1 4 => X
    4 => shift($(7 / 4 * π))
    1 => T
    @ctrl 1 4 => X
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 3 5 => X
    5 => T
    @ctrl 4 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 3 5 => X
    4 => T
    5 => T
    @ctrl 3 4 => X
    4 => shift($(7 / 4 * π))
    5 => H
    3 => T
    @ctrl 3 4 => X
    @ctrl 4 5 => X
    5 => H
    @ctrl 3 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 2 5 => X
    5 => T
    @ctrl 3 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 2 5 => X
    3 => T
    5 => T
    @ctrl 2 3 => X
    3 => shift($(7 / 4 * π))
    5 => H
    2 => T
    @ctrl 2 3 => X
    @ctrl 3 5 => X
    5 => H
    @ctrl 2 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    5 => T
    @ctrl 2 5 => X
    5 => shift($(7 / 4 * π))
    @ctrl 1 5 => X
    2 => T
    5 => T
    @ctrl 1 2 => X
    2 => shift($(7 / 4 * π))
    5 => H
    1 => T
    @ctrl 1 2 => X
    @ctrl 2 5 => X
    @ctrl 1 5 => X
end
cl_tp_cir = clifford_teleport_cir()
r_pt_cl |> cl_tp_cir
@test fidelity(r, r_pt_cl) ≈ 1

code = @code_yao test_cir()
zxd = ZXDiagram(code)
code2 = optimize(code, [:zx_teleport])
zxd2 = ZXDiagram(code2)
@test tcount(zxd2) == 8
